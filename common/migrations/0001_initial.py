# Generated by Django 4.0.6 on 2022-07-21 03:35

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64)),
                ('slug', models.CharField(max_length=4096)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=256, verbose_name='full name')),
                ('email', models.EmailField(error_messages={'error': 'Bunday email mavjud.'}, max_length=254, unique=True, verbose_name='email')),
                ('slug', models.CharField(max_length=4096)),
                ('avatar', models.ImageField(null=True, upload_to='profile_photos/')),
                ('cover_photo', models.ImageField(upload_to='profile_cpvers/')),
                ('bio', models.TextField(max_length=4096, null=True)),
                ('job', models.CharField(max_length=4096, null=True)),
                ('gender', models.CharField(choices=[('Erkak', 'Erkak'), ('Ayol', 'Ayol')], max_length=10, null=True)),
                ('date_of_birth', models.DateField(null=True)),
                ('phone_number', models.CharField(max_length=50, null=True)),
                ('location', models.CharField(max_length=128, null=True)),
                ('followers_number', models.PositiveIntegerField(default=0)),
                ('followings_number', models.PositiveIntegerField(default=0)),
                ('is_online', models.BooleanField(default=False)),
                ('was_active_at', models.DateTimeField(null=True)),
                ('website', models.CharField(max_length=128, null=True)),
                ('facebook_link', models.CharField(max_length=128, null=True)),
                ('twitter_link', models.CharField(max_length=128, null=True)),
                ('instagram_link', models.CharField(max_length=128, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date created')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('blocked_users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('followers', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('following', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='common.language')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'user',
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
